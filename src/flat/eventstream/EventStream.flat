package flat/eventstream

import flat/datastruct/HashMap
import flat/log/Logger

class {
  static Logger log = Logger(EventStream.class)

  HashMap<String, Array<action(Object, EventStream)>> eventListeners = HashMap()
  HashMap<String, Array<Object>> eventBacklog = HashMap()

  visible Bool backlogEvents = true
  visible var Bool closed = false

  public construct(
    visible Bool backlogMissedEvents = false
  ) {}

  public emit<DataType>(String eventType, DataType data = null) => data {
    if (closed) return null

    if (backlogEvents) {
      eventBacklog.getOrDefault(eventType, { Array() }).add(data)
    }

    if (let listeners = eventListeners.get(eventType)) {
      listeners.forEach({ _(data, this) })
    }
  }

  public on<DataType>(String eventType, action(DataType data, EventStream stream)) => this {
    if (closed) return this

    eventListeners.getOrDefault(eventType, { Array() }).add(action)

    if (backlogMissedEvents) {
      eventBacklog.get(eventType)?.forEach({ action(_, this) })
    }
  }

  public close() {
    closed = true
  }

  public async consumeAll<DataType>(String eventType, String closeEvent = "close") -> DataType[] {
    if (closed) return DataType[]

    let results = Array<DataType>()

    on(eventType, {
      results.add(_data)
    })

    waitFor(closeEvent)

    return results
  }
}
